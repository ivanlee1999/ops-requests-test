name: Auto Ops Request Generator

on:
  issues:
    types: [opened]

jobs:
  create-ops-pr:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: write
      pull-requests: write

    steps:
      - name: Checkout ops-request-test
        uses: actions/checkout@v3
        
      - name: Get Issue Content
        id: issue
        run: |
          # Escape the title and body to handle special characters
          title="$(jq -r .issue.title $GITHUB_EVENT_PATH | sed 's/"/\"/g')"
          body="$(jq -r .issue.body $GITHUB_EVENT_PATH | sed 's/"/\"/g')"
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "body=$body" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install anthropic requests

      - name: Checkout ops-test repository
        uses: actions/checkout@v3
        with:
          repository: ivanlee1999/ops-test
          token: ${{ secrets.GH_PAT }}
          path: ops-test

      - name: Process with Claude and Create PR
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cat > process_issue.py << 'EOL'
          import anthropic
          import json
          import os
          import requests
          import sys
          from datetime import datetime

          # Initialize Claude client
          client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])

          # Get issue details from environment and handle potential escaping
          issue_title = os.environ['ISSUE_TITLE'].replace('\"', '"')
          issue_body = os.environ['ISSUE_BODY'].replace('\"', '"')

          # Prepare prompt for Claude
          prompt = f"""Based on this issue request:
          Title: {issue_title}
          Body: {issue_body}

          Extract the following information:
          1. The new SHA1 to be updated
          2. The deployment file that needs to be updated
          3. Any additional context or requirements

          Format the response as JSON with keys: sha1, deployment_file, additional_context"""

          # Get Claude's response
          message = client.messages.create(
              model="claude-3-opus-20240229",
              max_tokens=1000,
              temperature=0,
              system="You are a helpful assistant that processes deployment update requests.",
              messages=[{"role": "user", "content": prompt}]
          )

          try:
              parsed = json.loads(message.content[0].text)
              
              # Create a new branch
              branch_name = f"update-sha1-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
              os.system(f"cd ops-test && git checkout -b {branch_name}")
              
              # Update the deployment file
              deployment_file = f"ops-test/{parsed['deployment_file']}"
              with open(deployment_file, 'r') as f:
                  content = f.read()
              
              # Update SHA1 in the file
              # Note: This is a simple example. You might need to adjust the replacement logic
              # based on your actual file structure
              import re
              updated_content = re.sub(
                  r'(image: .*:)[a-f0-9]{40}',
                  f"\\1{parsed['sha1']}",
                  content
              )
              
              with open(deployment_file, 'w') as f:
                  f.write(updated_content)
              
              # Commit and push changes
              os.system(f"""
                cd ops-test
                git config user.name "GitHub Action"
                git config user.email "action@github.com"
                git add {parsed['deployment_file']}
                git commit -m "Update deployment SHA1 to {parsed['sha1']}"
                git push origin {branch_name}
              """)
              
              # Create Pull Request
              headers = {
                  'Authorization': f"token {os.environ['GITHUB_TOKEN']}",
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              pr_body = {
                  'title': f"Update deployment SHA1: {parsed['sha1']}",
                  'body': f"""Automated PR created from issue #{os.environ['GITHUB_EVENT_NUMBER']}
                  
                  - New SHA1: `{parsed['sha1']}`
                  - Deployment File: `{parsed['deployment_file']}`
                  
                  Additional Context:
                  {parsed['additional_context']}
                  
                  Original Issue: {os.environ['GITHUB_SERVER_URL']}/{os.environ['GITHUB_REPOSITORY']}/issues/{os.environ['GITHUB_EVENT_NUMBER']}
                  """,
                  'head': branch_name,
                  'base': 'main'  # or your default branch
              }
              
              response = requests.post(
                  'https://api.github.com/repos/ivanlee1999/ops-test/pulls',
                  headers=headers,
                  json=pr_body
              )
              
              if response.status_code != 201:
                  print(f"Failed to create PR: {response.text}")
                  sys.exit(1)
                  
              print(f"Successfully created PR: {response.json()['html_url']}")
              
          except Exception as e:
              print(f"Error processing request: {str(e)}")
              sys.exit(1)
          EOL

          python process_issue.py