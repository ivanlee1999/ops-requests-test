name: Auto Ops Request Generator

on:
  issues:
    types: [opened]

jobs:
  create-ops-pr:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: write
      pull-requests: write

    steps:
      - name: Checkout ops-request-test
        uses: actions/checkout@v3
        
      - name: Get Issue Content
        id: issue
        run: |
          # Use GitHub's EOF delimiter syntax for multiline strings
          echo "title<<EOF" >> $GITHUB_OUTPUT
          jq -r .issue.title $GITHUB_EVENT_PATH >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          jq -r .issue.body $GITHUB_EVENT_PATH >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install anthropic requests

      - name: Checkout ops-test repository
        uses: actions/checkout@v3
        with:
          repository: ivanlee1999/ops-test
          token: ${{ secrets.GH_PAT }}
          path: ops-test

      - name: Process with Claude and Create PR
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          ISSUE_TITLE: ${{ steps.issue.outputs.title }}
          ISSUE_BODY: ${{ steps.issue.outputs.body }}
          GITHUB_EVENT_NUMBER: ${{ github.event.issue.number }}
        run: |
          cat > process_issue.py << 'EOL'
          import anthropic
          import json
          import os
          import requests
          import sys
          from datetime import datetime

          # Initialize Claude client
          client = anthropic.Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])

          # Get issue details from environment
          issue_title = os.environ['ISSUE_TITLE']
          issue_body = os.environ['ISSUE_BODY']

          # First, get deployment file path from issue
          file_prompt = f"""Based on this issue request:
          Title: {issue_title}
          Body: {issue_body}

          Extract only the deployment file path that needs to be updated.
          Return just the file path as a string, nothing else."""

          file_message = client.messages.create(
              model="claude-3-opus-20240229",
              max_tokens=1000,
              temperature=0,
              system="You are a helpful assistant that processes deployment update requests.",
              messages=[{"role": "user", "content": file_prompt}]
          )

          deployment_file = file_message.content[0].text.strip()
          full_file_path = f"ops-test/{deployment_file}"

          try:
              
              # Create a new branch
              branch_name = f"update-sha1-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
              os.system(f"cd ops-test && git checkout -b {branch_name}")
              
              # Read the current file content
              with open(full_file_path, 'r') as f:
                  current_content = f.read()

              # Send file content to Claude for updating
              update_prompt = f"""Based on this issue request:
              Title: {issue_title}
              Body: {issue_body}

              Here is the current content of the file {deployment_file}:
              ```yaml
              {current_content}
              ```

              Please update this file according to the issue request. Return only the updated file content in yaml format, nothing else.
              Do not include any markdown formatting or explanations, just the raw yaml content."""

              update_message = client.messages.create(
                  model="claude-3-opus-20240229",
                  max_tokens=2000,
                  temperature=0,
                  system="You are a helpful assistant that processes deployment update requests. You will receive yaml files and return updated yaml files.",
                  messages=[{"role": "user", "content": update_prompt}]
              )

              # Get the updated content from Claude
              updated_content = update_message.content[0].text.strip()
              
              # Write the updated content back to the file
              with open(full_file_path, 'w') as f:
                  f.write(updated_content)
              
              # Commit and push changes
              os.system(f"""
                cd ops-test
                git config user.name "GitHub Action"
                git config user.email "action@github.com"
                git add {parsed['deployment_file']}
                git commit -m "Update deployment configuration based on issue #${os.environ['GITHUB_EVENT_NUMBER']}"
                git push origin {branch_name}
              """)
              
              # Create Pull Request
              headers = {
                  'Authorization': f"token {os.environ['GITHUB_TOKEN']}",
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              pr_body = {
                  'title': f"Update {deployment_file} from issue #{os.environ['GITHUB_EVENT_NUMBER']}",
                  'body': f"""Automated PR created from issue #{os.environ['GITHUB_EVENT_NUMBER']}
                  
                  Updated file: `{deployment_file}`
                  
                  Changes were made based on the issue request:
                  Title: {issue_title}
                  
                  Original Issue: {os.environ['GITHUB_SERVER_URL']}/{os.environ['GITHUB_REPOSITORY']}/issues/{os.environ['GITHUB_EVENT_NUMBER']}
                  """,
                  'head': branch_name,
                  'base': 'main'  # or your default branch
              }
              
              response = requests.post(
                  'https://api.github.com/repos/ivanlee1999/ops-test/pulls',
                  headers=headers,
                  json=pr_body
              )
              
              if response.status_code != 201:
                  print(f"Failed to create PR: {response.text}")
                  sys.exit(1)
                  
              print(f"Successfully created PR: {response.json()['html_url']}")
              
          except Exception as e:
              print(f"Error processing request: {str(e)}")
              sys.exit(1)
          EOL

          python process_issue.py